package interfaceExploit

import (
	"fmt"
	"regexp"
)

const (
	//Dipendenze specifiche della CTF
	UrlSubmit = "https://scoreboard.ctf.cinsects.de/ctf/submit_flag/"
	//Dipendenze tuo pc
	DirExploits = "/home/ossigeno/CTF/ATTACKDEFENSE/flags-submitter/ourExploits"
	//Estensioni file
	TeamFileExtension    = "teams"
	ExploitFileExtension = "py"
	//Protocolli submit
	HTTP = "HTTP"
	TCP  = "TCP"
	//Comandi
	START      = "start"
	STOP       = "stop"
	COMMANDS   = "commands"
	ADDG       = "add"
	REMOVEG    = "remove"
	CHANGETIME = "time"
	//Credenziali login
	Username = ""
	Password = ""
)

var (
	Exploits []ExploitInfo
	//Regex Flag
	FlagRegex, _ = regexp.Compile("FLG[0-9a-zA-Z]{29}")
	//Tempi
	TimeSubmit  = 40
	TimeExploit = 20
	TimePrint   = 30
	TimeTimeout = 15
	MaxPrints   = 2
)

type FlagInfo struct {
	Flag   string
	Status string
}

type ExploitInfo struct {
	Teams  []TeamInfo //TODO passare a map probabilmente
	Name   string
	Active bool
	Path   string
	Flags  int
}

type TeamInfo struct {
	Name  string
	Flag  []FlagInfo //TODO passare a map probabilmente
	Flags int
}

//Costruttore
func NewTeamInfo(name string) TeamInfo {
	flag := FlagInfo{}
	flag.Flag = ""
	flag.Status = "INVALID"
	team := TeamInfo{}
	team.Name = name
	team.Flag = append(team.Flag, flag)
	team.Flags = 0
	return team
}

//Costruttore
func NewExploitInfo(name string, path string, teams []TeamInfo) ExploitInfo {
	expl := ExploitInfo{}
	expl.Name = name
	expl.Teams = teams
	expl.Path = path
	expl.Active = true
	expl.Flags = 0
	return expl
}

func flagInfoPP(flag FlagInfo) string {
	res := fmt.Sprintf("\t\tFlag: %s | Status: %s \n", flag.Flag, flag.Status)
	return res
}

func teamInfoPP(team TeamInfo) string {
	flags := ""
	leng := len(team.Flag)
	var min int
	if leng < MaxPrints {
		min = leng
	} else {
		min = MaxPrints
	}
	for i := 0; i < min; i++ {
		flags += flagInfoPP(team.Flag[i])
	}
	res := fmt.Sprintf("\tTeam: %s |Flags %d |  \n%s  \n", team.Name, team.Flags, flags)
	return res
}

func exploitInfoPP(exploit ExploitInfo) string {
	res := fmt.Sprintf("Exploit: %s | Active: %t | Flags: %d  \n", exploit.Name, exploit.Active, exploit.Flags)
	if exploit.Active {
		for _, team := range exploit.Teams {
			res += teamInfoPP(team)
		}
	}
	res += "------------------------------------------------------------------------" + "\n\n"
	return res
}

func PPExploits() string {
	res := ""
	for _, exploit := range Exploits {
		res += exploitInfoPP(exploit)
	}
	return res
}

func GetExploit(name string) (int, string) {
	for index, exploit := range Exploits {
		if name == exploit.Name {
			return index, name
		}
	}
	return -1, "errore" //TODO fix
}
